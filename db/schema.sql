

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "vector" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "wrappers" WITH SCHEMA "extensions";






CREATE TYPE "public"."feedback_category" AS ENUM (
    'feature request',
    'bug report',
    'general feedback'
);


ALTER TYPE "public"."feedback_category" OWNER TO "postgres";


CREATE TYPE "public"."feedback_status" AS ENUM (
    'under consideration',
    'planned',
    'in progress',
    'done',
    'declined'
);


ALTER TYPE "public"."feedback_status" OWNER TO "postgres";


CREATE TYPE "public"."subscription_frequency" AS ENUM (
    'month',
    'year'
);


ALTER TYPE "public"."subscription_frequency" OWNER TO "postgres";


CREATE TYPE "public"."subscription_name" AS ENUM (
    'free',
    'pro',
    'max'
);


ALTER TYPE "public"."subscription_name" OWNER TO "postgres";


CREATE TYPE "public"."user_org_role" AS ENUM (
    'admin',
    'user'
);


ALTER TYPE "public"."user_org_role" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."activity_seen" (
    "userId" "text" NOT NULL,
    "itemId" "uuid" NOT NULL
);


ALTER TABLE "public"."activity_seen" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."admin_invites" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "email" "text" NOT NULL,
    "orgId" "uuid" NOT NULL,
    "token" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."admin_invites" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."comment" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "content" "text" NOT NULL,
    "authorId" "text" NOT NULL,
    "postId" "uuid" NOT NULL,
    "parentCommentId" "uuid",
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "upvotes" numeric DEFAULT '0'::numeric NOT NULL,
    "embedding" "extensions"."vector"(768)
);


ALTER TABLE "public"."comment" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."feedback" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "authorId" "text",
    "orgId" "uuid" NOT NULL,
    "title" "text" NOT NULL,
    "description" "text" NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "category" "public"."feedback_category",
    "upvotes" numeric DEFAULT '0'::numeric NOT NULL,
    "embedding" "extensions"."vector"(768),
    "status" "public"."feedback_status"
);


ALTER TABLE "public"."feedback" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."insight_reports" (
    "id" bigint NOT NULL,
    "orgId" "uuid" NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."insight_reports" OWNER TO "postgres";


ALTER TABLE "public"."insight_reports" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."insight_reports_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."insights" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "orgId" "uuid" NOT NULL,
    "title" "text" NOT NULL,
    "description" "text" NOT NULL,
    "upvotes" numeric DEFAULT '0'::numeric NOT NULL,
    "commentCount" numeric DEFAULT '0'::numeric NOT NULL,
    "status" "public"."feedback_status",
    "ids" "text"[] NOT NULL,
    "priority" numeric DEFAULT '0'::numeric NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "category" "public"."feedback_category"
);


ALTER TABLE "public"."insights" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."kysely_migration" (
    "name" character varying(255) NOT NULL,
    "timestamp" character varying(255) NOT NULL
);


ALTER TABLE "public"."kysely_migration" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."kysely_migration_lock" (
    "id" character varying(255) NOT NULL,
    "is_locked" integer DEFAULT 0 NOT NULL
);


ALTER TABLE "public"."kysely_migration_lock" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."org" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "orgSubdomain" "text" NOT NULL,
    "isClaimed" boolean DEFAULT false NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "platformTitle" "text" DEFAULT 'Share your feedback'::"text" NOT NULL,
    "platformDescription" "text"
);


ALTER TABLE "public"."org" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."subscriptions" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "orgId" "uuid" NOT NULL,
    "customerId" "text" NOT NULL,
    "subscriptionId" "text" NOT NULL,
    "productId" "text" NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "status" "text" NOT NULL,
    "name" "public"."subscription_name" NOT NULL,
    "frequency" "public"."subscription_frequency" NOT NULL,
    "amount" numeric NOT NULL,
    "validUntil" timestamp with time zone,
    "email" "text"
);


ALTER TABLE "public"."subscriptions" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user" (
    "id" "text" NOT NULL,
    "name" "text",
    "email" "text" NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "photoURL" "text"
);


ALTER TABLE "public"."user" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_org" (
    "userId" "text" NOT NULL,
    "orgId" "uuid" NOT NULL,
    "role" "public"."user_org_role" DEFAULT 'user'::"public"."user_org_role" NOT NULL,
    CONSTRAINT "user_org_role_check" CHECK ((("role")::"text" = ANY (ARRAY[('admin'::character varying)::"text", ('user'::character varying)::"text"])))
);


ALTER TABLE "public"."user_org" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_upvote" (
    "userId" "text" NOT NULL,
    "contentId" "uuid" NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."user_upvote" OWNER TO "postgres";


ALTER TABLE ONLY "public"."activity_seen"
    ADD CONSTRAINT "activity_seen_pkey" PRIMARY KEY ("userId", "itemId");



ALTER TABLE ONLY "public"."activity_seen"
    ADD CONSTRAINT "activity_seen_userid_itemid_unique" UNIQUE ("userId", "itemId");



ALTER TABLE ONLY "public"."admin_invites"
    ADD CONSTRAINT "admin_invites_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."admin_invites"
    ADD CONSTRAINT "admin_invites_token_key" UNIQUE ("token");



ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "comment_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."feedback"
    ADD CONSTRAINT "feedback_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."insight_reports"
    ADD CONSTRAINT "insight_reports_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."insights"
    ADD CONSTRAINT "insights_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."kysely_migration_lock"
    ADD CONSTRAINT "kysely_migration_lock_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."kysely_migration"
    ADD CONSTRAINT "kysely_migration_pkey" PRIMARY KEY ("name");



ALTER TABLE ONLY "public"."org"
    ADD CONSTRAINT "org_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."org"
    ADD CONSTRAINT "org_subdomain_key" UNIQUE ("orgSubdomain");



ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_customerId_key" UNIQUE ("customerId");



ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_subscriptionId_key" UNIQUE ("subscriptionId");



ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."user_org"
    ADD CONSTRAINT "user_org_pk" PRIMARY KEY ("userId", "orgId");



ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_upvote"
    ADD CONSTRAINT "user_upvote_pkey" PRIMARY KEY ("userId", "contentId");



CREATE INDEX "comment_author_id_index" ON "public"."comment" USING "btree" ("authorId");



CREATE INDEX "comment_embedding_index" ON "public"."comment" USING "hnsw" ("embedding" "extensions"."vector_cosine_ops");



CREATE INDEX "comment_parent_comment_id_index" ON "public"."comment" USING "btree" ("parentCommentId");



CREATE INDEX "comment_post_id_index" ON "public"."comment" USING "btree" ("postId");



CREATE INDEX "feedback_embedding_index" ON "public"."feedback" USING "hnsw" ("embedding" "extensions"."vector_cosine_ops");



CREATE INDEX "feedback_orgid_idx" ON "public"."feedback" USING "btree" ("orgId");



CREATE INDEX "feedback_status_idx" ON "public"."feedback" USING "btree" ("status");



CREATE INDEX "idx_comment_created_at" ON "public"."comment" USING "btree" ("createdAt");



CREATE INDEX "idx_feedback_created_at" ON "public"."feedback" USING "btree" ("createdAt");



CREATE INDEX "idx_feedback_created_at_upvotes" ON "public"."feedback" USING "btree" ("createdAt", "upvotes");



CREATE INDEX "idx_feedback_createdat_status" ON "public"."feedback" USING "btree" ("createdAt", "status");



CREATE INDEX "idx_feedback_upvotes" ON "public"."feedback" USING "btree" ("upvotes");



CREATE INDEX "idx_subscription_org_id" ON "public"."subscriptions" USING "btree" ("orgId");



CREATE INDEX "insights_org_id_index" ON "public"."insights" USING "btree" ("orgId");



ALTER TABLE ONLY "public"."activity_seen"
    ADD CONSTRAINT "activity_seen_status_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."user"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."admin_invites"
    ADD CONSTRAINT "admin_invites_orgId_fkey" FOREIGN KEY ("orgId") REFERENCES "public"."org"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "comment_authorId_fkey" FOREIGN KEY ("authorId") REFERENCES "public"."user"("id");



ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "comment_parentCommentId_fkey" FOREIGN KEY ("parentCommentId") REFERENCES "public"."comment"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "comment_postId_fkey" FOREIGN KEY ("postId") REFERENCES "public"."feedback"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."feedback"
    ADD CONSTRAINT "feedback_authorId_fkey" FOREIGN KEY ("authorId") REFERENCES "public"."user"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."feedback"
    ADD CONSTRAINT "feedback_orgId_fkey" FOREIGN KEY ("orgId") REFERENCES "public"."org"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."insight_reports"
    ADD CONSTRAINT "insight_reports_orgId_fkey" FOREIGN KEY ("orgId") REFERENCES "public"."org"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."insights"
    ADD CONSTRAINT "insights_orgId_fkey" FOREIGN KEY ("orgId") REFERENCES "public"."org"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_orgId_fkey" FOREIGN KEY ("orgId") REFERENCES "public"."org"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_org"
    ADD CONSTRAINT "user_org_org_id_fkey" FOREIGN KEY ("orgId") REFERENCES "public"."org"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_org"
    ADD CONSTRAINT "user_org_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."user"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_upvote"
    ADD CONSTRAINT "user_upvote_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."user"("id") ON DELETE CASCADE;





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";






































































































































































































































































































































































































































































































































































































































































































GRANT ALL ON TABLE "public"."activity_seen" TO "anon";
GRANT ALL ON TABLE "public"."activity_seen" TO "authenticated";
GRANT ALL ON TABLE "public"."activity_seen" TO "service_role";



GRANT ALL ON TABLE "public"."admin_invites" TO "anon";
GRANT ALL ON TABLE "public"."admin_invites" TO "authenticated";
GRANT ALL ON TABLE "public"."admin_invites" TO "service_role";



GRANT ALL ON TABLE "public"."comment" TO "anon";
GRANT ALL ON TABLE "public"."comment" TO "authenticated";
GRANT ALL ON TABLE "public"."comment" TO "service_role";



GRANT ALL ON TABLE "public"."feedback" TO "anon";
GRANT ALL ON TABLE "public"."feedback" TO "authenticated";
GRANT ALL ON TABLE "public"."feedback" TO "service_role";



GRANT ALL ON TABLE "public"."insight_reports" TO "anon";
GRANT ALL ON TABLE "public"."insight_reports" TO "authenticated";
GRANT ALL ON TABLE "public"."insight_reports" TO "service_role";



GRANT ALL ON SEQUENCE "public"."insight_reports_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."insight_reports_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."insight_reports_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."insights" TO "anon";
GRANT ALL ON TABLE "public"."insights" TO "authenticated";
GRANT ALL ON TABLE "public"."insights" TO "service_role";



GRANT ALL ON TABLE "public"."kysely_migration" TO "anon";
GRANT ALL ON TABLE "public"."kysely_migration" TO "authenticated";
GRANT ALL ON TABLE "public"."kysely_migration" TO "service_role";



GRANT ALL ON TABLE "public"."kysely_migration_lock" TO "anon";
GRANT ALL ON TABLE "public"."kysely_migration_lock" TO "authenticated";
GRANT ALL ON TABLE "public"."kysely_migration_lock" TO "service_role";



GRANT ALL ON TABLE "public"."org" TO "anon";
GRANT ALL ON TABLE "public"."org" TO "authenticated";
GRANT ALL ON TABLE "public"."org" TO "service_role";



GRANT ALL ON TABLE "public"."subscriptions" TO "anon";
GRANT ALL ON TABLE "public"."subscriptions" TO "authenticated";
GRANT ALL ON TABLE "public"."subscriptions" TO "service_role";



GRANT ALL ON TABLE "public"."user" TO "anon";
GRANT ALL ON TABLE "public"."user" TO "authenticated";
GRANT ALL ON TABLE "public"."user" TO "service_role";



GRANT ALL ON TABLE "public"."user_org" TO "anon";
GRANT ALL ON TABLE "public"."user_org" TO "authenticated";
GRANT ALL ON TABLE "public"."user_org" TO "service_role";



GRANT ALL ON TABLE "public"."user_upvote" TO "anon";
GRANT ALL ON TABLE "public"."user_upvote" TO "authenticated";
GRANT ALL ON TABLE "public"."user_upvote" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
